# Outcommented values show defaults

[PVControl]            # --------------------------        Controller settings (for both simulation and active mode)
    run                = 20                                # simulation mode: run wallbox charging simulation (else, only actual data are dumped to output)
                                                           # active mode:     delay [s] from call, until controller is run, to avoid congestion eg. at inverter
                                                           #                  when running eg. solaranzeige at start of each minute (through crontab, etc.)

    I_min              =  6                                # minimal charge current we want to start charging
    I_max              = 16                                # 0 will disable wallbox control
    I_gridMax          =  0                                # maximum grid contribution to wallbox charging
    # phases           =  3                                # number of phases available to Wallbox (default 3, could be or 1)
    feedInLimit        = 6825                              # feed-in limit (due to network provider limitations, default 99999) [W]
    minSOC             = 0.1                               # fast-charge battery from PV to this level if below        (0 .. 1, default 0.05)
    maxSOC             = 0.9                               # max. SOC to which we want charge battery                  (0 .. 1, default 1)
    maxSOCCharge       = 0.7                               # max. SOC when car is connected, but not fully charged yet (0 .. 1, default maxSOC)
    minSOCCharge       = 0.1                               # fast-charge battery from PV to this level if below        (0 .. 1, default minSOC)

    host               = <IP of InfluxDB>                  # controller writes to this Influx host ...
    # port             = 8086                              # ... Influx port
    database           = hardy                             # ... and database
    # inhibitInflux    = 0                                 # inhibit writing to Influx DB, default False
    # wallbox          = HardyBarth                        # wallbox provider   (currently: only HardyBarth (or 'dummy' if only homebattery charge control needed))
    # pvmonitor        = Kostal                            # PVMontior provider (could be: SolarAnzeige)

    # enableGUI        = 0                                 # enable communication with GUI (project PVControl), default False
    # guiPath          = ~/.node-red/projects/PVControl    # path to GUI home directory

[HardyBarth]           # --------------------------        Hardy Barth Wallbox Provider configuration
    # inhibitWrite     =  0                                # inhibit writes to wallbox - for debugging, default False
    # verbose          =  1                                # create verbose output     - for debugging, default False
    I_chargeMin        =  6                                # minimum possible charge current
    I_chargeMax        = 16                                # maximum possible charge current
    host               = <IP of wallbox>                   # IP of wallbox

[Kostal]               # --------------------------        Kostal PVMonitor provider configuration
    host               = <IP of inverter>
    passwd             = <password of inverter>
    # inhibitWrite     = 0                                 # inhibit writes to inverter - for debugging, default False
    # verbose          = 0                                 # create verbose output      - for debugging, default False

[SolarAnzeige]         # --------------------------        SolarAnzeige PVMonitor provider configuration / used for simulation
    host               = <IP of SolarAnzeige host>         # Solaranzeige host ...
    # port             = 8086                              # ... Influx port
    database           = solaranzeige                      # ... and database

[PVStorage]            # --------------------------        home battery storage system configuration
    batCapacity        = 7680                              # battery capacity [Wh]
    # minSOC           = 0.05                              # don't discharge battery below this value(0 .. 1, default 0.05)
    maxBatDischarge    = 3990                              # max battery discharge power [W]
    # maxBatCharge     = 3990                              # max battery charge power [W], default: maxBatDischarge/0.97 (efficiency), 
                                                           # default assumes DC coupled battery 

[PVForecast]           # --------------------------        PV forecast provider
    host               = <IP of host running PVForecast>
    # port             = 8086                              # ... Influx port
    database           = forecast                          # ... and database
    forecastField      = solcast.pv_estimate               # <measurement>.<field> containing forecast estimation
    # useForecast      = 1                                 # use forecast yes/no

[PVSystem]             # --------------------------        simulates PV system (panels, inverters), using pvlib; only used for clearsky performance
    Latitude           = <latitude_of_PV_System>
    Longitude          = <longitude_of_PV_System>
    # Altitude         = 0                                 # altidude of system (above sea level)

    # ---------------------------------------------------- following configurations are only used for clearsky limit calculation through PVServer
    #                                                      some more control options are defined in pvmodel.py, but they are not relevant for 
    #                                                      the application here
    Tilt               =  30                               # tilt and orientation of solar panels
    Azimuth            = 127                               # 270=West, 180=South, 90=East

    # Model            = CEC                               # modeling strategy for PV: 'CEC' or 'PVWatts' 
    # TemperatureModel = open_rack_glass_glass             # https://pvlib-python.readthedocs.io/en/stable/generated/pvlib.temperature.sapm_cell.html
    # clearsky_model   = simplified_solis                  # ineichen or simplified_solis (haurwitz not supported)
    
                                                           # next four lines only needed if Model = CEC (default), see .csv files at 
                                                           # ~/.local/lib/python3.8/site-packages/pvlib/data for allowed names, replace special characters with '_'
    ModuleName         = LG_Electronics_Inc__LG325N1W_V5
    InverterName       = SMA_America__SB10000TL_US__240V_
    NumStrings         =   2                               # number of strings 
    NumPanels          =  15                               # number of panels per string

                                                           # next four lines only needed if Model = PVWatts
    InverterPower      = 10000                             # name-plate inverter max. power
    NominalEfficiency  = 0.965                             # nominal European inverter efficiency
    SystemPower        =  9750                             # system power [Wp]
    TemperatureCoeff   = -0.0036                           # temperature coefficient (efficiency loss per 1C)

[PVServer]             # --------------------------        # Simulator configuration
    startDate          = 2021-01-08                        # start date of simulation
    endDate            = 2021-01-08                        # end date   of simulation (default: startDate - simulate one day only)
    connectTime        = 10:00                             # time when EV is connected to wallbox
    chargePower        = 13000                             # total power we want to charge
    # breakTime        = 14:02                             # allows to set a debugging break point in pvserver.py

    #startSOC           = 0.05                             # SOC at sunries - default: SOC from PVMonitor provider (SolarAnzeige)
    maxConsumption     = 4500                              # limit home consumption to this (default: no limit = 99999)
    baseConsumption    =  350                              # ... if limit is reached, replace with this
    sigmaConsumption   =    0                              # ... +- this (sigma); zero = fixed value, which makes simulator output deterministic
    feedInLimit        = 6825                              # limit grid feedin [W] (due to regulatory rules; default: no limit = 99999)

    storePath          = ./temp/                           # storage path for files generated; plot files will be <day>.png
    storePNG           = 0                                 # store PNG files (instead of interactive display)
    # maxY             = 10000                             # defines y-axis of plots
