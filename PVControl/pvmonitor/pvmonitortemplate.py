from abc import ABC, abstractmethod

class PVMonitorTemplate(ABC):
    """
    Abstract class for a PVMonitor provider. A PVMonitor provider must provide a valid status of the PVSystem,
    and potentially control the inverter.
    """
    def __init__(self, config = None):
        self.status = []

    @abstractmethod
    def getStatus(self):
        """
        Get status from PV System

        Returns
        -------
            Pandas Series (or DataFrame) with:
                index (name)      : timestamp (UTC)
                soc               : battery SOC, 0 .. 1
                bat_power         : charging (>0 ) / discharging (<0) power to / from home battery [W]
                dc_power          : DC power generated by PV system [W]
                home_consumption  : home consumption [W]; this includes wallbox consumption, but not home battery charging
                grid_voltage      : average grid voltage (between three phases) [V]

            Additional fields can be provided and will be stored through PVControl._logInflux into measurement pvstatus
            See actual implementation for these additional fields
        """
        pass

    @abstractmethod
    def setBatCharge(self):
        """
        Control battery charging of home battery. The implementation is expected to control the inverter
        in such a way that battery is charged according to the supplied parameters

        Parameters
        ----------
            fastcharge   : boolean
                if true, battery is charged with maximum possible current, delivered from PV system
                if false, smart battery charging of inverter is enabled
            feedinLimit  : float [W]
                maximum power which is allowed to be delivered to grid (limited by network provider)
            maxChargeLim : float [W]
                maximum charging power which should be delivered to battery
            maxSoc       : float (0 .. 1), optional with default = 1
                maximum SOC which should be acheived
        """
        pass
